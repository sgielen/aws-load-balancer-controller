// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/networking (interfaces: VPCInfoProvider)

// Package networking is a generated GoMock package.
package networking

import (
	context "context"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVPCInfoProvider is a mock of VPCInfoProvider interface
type MockVPCInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockVPCInfoProviderMockRecorder
}

// MockVPCInfoProviderMockRecorder is the mock recorder for MockVPCInfoProvider
type MockVPCInfoProviderMockRecorder struct {
	mock *MockVPCInfoProvider
}

// NewMockVPCInfoProvider creates a new mock instance
func NewMockVPCInfoProvider(ctrl *gomock.Controller) *MockVPCInfoProvider {
	mock := &MockVPCInfoProvider{ctrl: ctrl}
	mock.recorder = &MockVPCInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVPCInfoProvider) EXPECT() *MockVPCInfoProviderMockRecorder {
	return m.recorder
}

// FetchVPCInfo mocks base method
func (m *MockVPCInfoProvider) FetchVPCInfo(arg0 context.Context, arg1 string) (*ec2.Vpc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVPCInfo", arg0, arg1)
	ret0, _ := ret[0].(*ec2.Vpc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVPCInfo indicates an expected call of FetchVPCInfo
func (mr *MockVPCInfoProviderMockRecorder) FetchVPCInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVPCInfo", reflect.TypeOf((*MockVPCInfoProvider)(nil).FetchVPCInfo), arg0, arg1)
}
